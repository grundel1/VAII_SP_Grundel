@page "/create-order"
@page "/create-order/{dentistId:int}"
@using Bakalárska__práca.Shared.Model
@using Bakalárska__práca.Shared.Services
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager NavigationManager
@inject IOrderService OrderService
@inject IDentistService DentistService
@inject IUserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveAuto

<div class="create-order-form">
    @if (Id == null)
    {
        <h3>Vytvor objednávku</h3>
    }
    else
    {
        <h3>Uprav objednávku</h3>
    }

    <EditForm Model="order" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />

        <div>
            <label>Vybraný zubár:</label>
            <p>@dentistFullName</p>

            <label>Výběr vyšetrenia:</label>
            <p>@order.Specialization</p>

            <label>Dátum</label>
            <InputDate @bind-Value="selectedDate" min="@Today" @onchange="LoadAvailableTimes" />

            @if (availableTimes.Any())
            {
                <label>Vyberte dostupný čas</label>
                <InputSelect @bind-Value="orderTime">
                    @foreach (var time in availableTimes)
                    {
                        <option value="@time">@time</option>
                    }
                </InputSelect>
            }
            else if (selectedDate != null)
            {
                <p>Žiadne voľné termíny pre tento deň.</p>
            }

        </div>

        <div class="buttons">
            <button type="submit" class="btn btn-primary">Potvrdiť</button>
            <button class="btn btn-cancel" @onclick="CancelOrder">Zrušiť</button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter] public int? Id { get; set; }
    [Parameter] public int? DentistId { get; set; }
    [Parameter] public string? UserId { get; set; }

    private Order order = new Order();
    private string dentistFullName = "Neznámy zubár";
    private DateTime? selectedDate;
    private List<string> availableTimes = new();
    private string orderTime;

    private string Today => DateTime.Today.ToString("yyyy-MM-dd");

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            UserId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        }
    }

    private void CancelOrder()
    {
        NavigationManager.NavigateTo("/vyhladatZubara");
    }

    protected override async Task OnParametersSetAsync()
    {
        if (DentistId.HasValue)
        {
            var dentist = await DentistService.GetDentistById(DentistId.Value);
            dentistFullName = $"{dentist.Name} {dentist.Surname}";
            order.Specialization = dentist.Specialization;
        }
    }

    private async Task LoadAvailableTimes(ChangeEventArgs e)
    {
        selectedDate = DateTime.Parse(e.Value.ToString());
        availableTimes.Clear();

        if (DentistId.HasValue && selectedDate.HasValue)
        {
            var orders = await OrderService.GetOrdersByDentistAndDate(DentistId.Value, selectedDate.Value);
            var bookedTimes = orders.Select(o => o.OrderTime.TimeOfDay).ToList();

            TimeSpan startTime = new TimeSpan(0, 0, 0);
            TimeSpan endTime = new TimeSpan(15, 0, 0);
            TimeSpan interval = new TimeSpan(0, 30, 0);

            for (var time = startTime; time < endTime; time += interval)
            {
                if (!bookedTimes.Any(bt => bt == time))
                {
                    availableTimes.Add(time.ToString(@"hh\:mm"));
                }
            }
        }
    }

    private async Task HandleSubmit()
    {
        if (!string.IsNullOrEmpty(orderTime))
        {
            order.OrderTime = selectedDate.Value.Add(TimeSpan.Parse(orderTime));
            order.UserId = UserId;
            order.DentistId = DentistId.Value;

            await OrderService.AddOrder(order);
            NavigationManager.NavigateTo("/orderList");
        }
    }
}
