@page "/edit-order"
@page "/edit-order/{id:int}"
@using Bakalárska__práca.Shared.Model
@using Bakalárska__práca.Shared.Services
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager NavigationManager
@inject IOrderService OrderService
@inject IDentistService DentistService
@rendermode InteractiveAuto
@attribute [Authorize(Roles = "User")]

@if(Id == null)
{
    <h3>Vytvor objednávku</h3>
}
else
{
    <h3>Uprav objednávku</h3>
}

<EditForm Model="order" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator/>
    <div>
        <label>Vybraný zubár:</label>
        <p>@dentistFullName</p>
        <label>Dátum a čas</label>
        <InputDate @bind-Value="order.OrderTime" min="@Today"></InputDate>
        <input class="inputTime" type="time" @bind-value="order.Time" step="900"/>
        <label>Výber vyšetrenia</label>
        <InputSelect TValue="string" @bind-Value="order.Specialization">
            <option value=""></option>
            <option value="Stomatochirurgia">Stomatochirurgia</option>
            <option value="Parodontológia">Parodontológia</option>
            <option value="Ortodoncia">Ortodoncia</option>
            <option value="Pedostomatológia">Pedostomatológia</option>
            <option value="Všeobecné pre dospelých">Všeobecné pre dospelých</option>
            <option value="Všeobecné pre deti">Všeobecné pre deti</option>
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-primary">Potvrdiť</button>
    @if (Id != null)
    {
        <button @onclick="ShowDialog" type="button" class="btn btn-danger">Zmazať</button>
    }
</EditForm>



@if (_dialogVisible)
{
    <div class="dialog-overlay">
        <div class="dialog-box">
            <h3>Naozaj chcete vymazať objednávku?</h3>
            <div class="dialog-actions">
                <button class="confirm-button" @onclick="ConfirmDelete">Áno, vymazať</button>
                <button class="cancel-button" @onclick="CancelDelete">Zrušiť</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int? Id { get; set; }

    [Parameter]
    public int? DentistId { get; set; }

    Order order { get; set; } = new Order { };
    string dentistFullName = "Neznámy zubár";

    private bool _dialogVisible = false;
    private string Today => DateTime.Today.ToString("yyyy-MM-dd");

    protected override async Task OnParametersSetAsync()
    {
        if (Id.HasValue)
        {
            order = await OrderService.GetOrderById(Id.Value);
            DentistId = order.DentistId;

            if (DentistId.HasValue)
            {
                var dentist = await DentistService.GetDentistById(DentistId.Value);
                dentistFullName = $"{dentist.Name} {dentist.Surname}";
            }
        }
        else
        {
            order = new Order { };
            if (DentistId.HasValue)
            {
                order.DentistId = DentistId.Value;
                var dentist = await DentistService.GetDentistById(DentistId.Value);
                dentistFullName = $"{dentist.Name} {dentist.Surname}";
            }
        }
    }

    protected override void OnInitialized()
    {
        order.OrderPlaced = DateTime.Today;
    }

    async Task HandleSubmit()
    {
        order.OrderTime = order.OrderTime.Date.Add(order.Time.TimeOfDay);


        if (Id == null)
        {
            await OrderService.AddOrder(order);
            NavigationManager.NavigateTo("/orderList");
        }
        else
        {
            await OrderService.EditOrder((int)Id, order);
            NavigationManager.NavigateTo("/orderList");
        }
    }

    private void ShowDialog()
    {
        _dialogVisible = true;
    }

    async Task ConfirmDelete()
    {
        _dialogVisible = false;
        await OrderService.DeleteOrder((int)Id);
        NavigationManager.NavigateTo("/orderList");
    }

    private void CancelDelete()
    {
        _dialogVisible = false;
    }

    private readonly TimeSpan OpeningTime = new TimeSpan(8, 0, 0); // 8:00
    private readonly TimeSpan ClosingTime = new TimeSpan(18, 0, 0); // 18:00

    private bool IsValidTime() => order.Time.TimeOfDay >= OpeningTime && order.Time.TimeOfDay <= ClosingTime;
}
